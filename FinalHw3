% hw3.pl
% Payson Briggs
% ------------------------------------------------
% #1 (Undergraduate/Graduate) (5/5 pts)
% Determine the Maximum of two int numbers
% maxnums(A, B, MAX).
maxnums(A, B, A) :- A >= B.
maxnums(A, B, B) :- A < B.

% ------------------------------------------------
% #2 (Undergraduate/Graduate) (5/5 pts)
% Determine the summation of a list of integer numbers
% sum(LST, SUM).
sum([], 0).
sum([Head|Tail], Sum) :-
    sum(Tail, TailSum),
    Sum is Head + TailSum.

% ------------------------------------------------
% #3 (Undergraduate/Graduate) (5/5 pts)
% Determine the Maximum of list of integer numbers
% ** You MUST use/call your maxnums predicate that you defined in #1
%    as part of your solution.
% ** You can always assume that the given LST is not empty.
% max(LST, MAX).
max([X], X).
max([Head|Tail], Max) :-
    max(Tail, TailMax),
    maxnums(Head, TailMax, Max).

% ------------------------------------------------
% #4 (Undergraduate/Graduate) (5/5 pts)
% Determine if a list of integer numbers can be split into two lists
% that sum to the same value.
% ** You MUST use/call your sum predicate that you defined in #2
%    as part of your solution.
% ** You can always assume that the given LST is not empty.
% partitionable(LST).
partitionable(Lst) :-
    sum(Lst, TotalSum),
    TotalSum mod 2 =:= 0,
    HalfSum is TotalSum // 2,
    can_partition(Lst, HalfSum).

can_partition(_, 0). % Added a period here
can_partition([Item|Rest], Target) :-
    (  can_partition(Rest, Target)
    ;  NewTarget is Target - Item,
       NewTarget >= 0,
       can_partition(Rest, NewTarget)
    ).

% ------------------------------------------------
% #5 (Undergraduate/Graduate) (5/5 pts)
% Determine whether the given integer number does exist in the given
% list of integer numbers
% elementExist(E, LST).
elementExist(E, [E|_]) :- !.
elementExist(E, [_|Tail]) :-
    elementExist(E, Tail).

% ------------------------------------------------
% #6 (Undergraduate/Graduate) (5/5 pts)
% Determine the reverse list of integer numbers
% reverse(LST, REVLST).
reverse([], []).
reverse(Lst, RevLst) :-
    reverse_helper(Lst, [], RevLst).

reverse_helper([], Acc, Acc).
reverse_helper([H|T], Acc, Rev) :-
    reverse_helper(T, [H|Acc], Rev).

% ------------------------------------------------
% #7 (Undergraduate/Graduate) (5/5 pts)
% Determine the list of integer numbers that are only one digit numbers
% collectOneDigits(LST, NEWLST).
collectOneDigits([], []).

collectOneDigits([H|T], [H|NewT]) :-
    H >= -9, H =< 9,
    collectOneDigits(T, NewT).

collectOneDigits([H|T], NewT) :-
    (H < -9; H > 9),
    collectOneDigits(T, NewT).

% ------------------------------------------------
% #8 (Undergraduate/Graduate) (5/5 pts)
% Determine all places based on given state and zipcode.
% getStateInfo(PLACE, STATE, ZIPCODE).
getStateInfo(Place, State, Zipcode) :-
    location(Zipcode, Place, State, _, _, _).
getStateInfo(Place, State, _) :-
    location(_, Place, State, _, _, _).

% ------------------------------------------------
% #9 (Undergrad/Grad) (15/5 pts)
% Gets place names that are common to both STATE1 and STATE2,
% where STATE1 and STATE2 differ
% getCommon(STATE1, STATE2, PLACELST).
placesInState(State, Places) :-
    findall(Place, location(_, Place, State, _, _, _), PlacesList),
    sort(PlacesList, Places).

getCommon(STATE1, STATE2, PLACELST) :-
    placesInState(STATE1, Places1),
    placesInState(STATE2, Places2),
    intersection(Places1, Places2, CommonPlaces),
    sort(CommonPlaces, PLACELST).


% getCommon('OH','MI',PLACELST). -> *Should be 131 unique plcase*
% ['Manchester','Unionville','Athens','Saint
% Johns','Belmont','Bellaire','Bridgeport','Lansing','Flushing','D
% ecatur','Hamilton','Oxford','Trenton','Monroe','Augusta','Carrol
% lton','Milford','Moscow','New
% Richmond','Williamsburg','Clarksville','Midland','Elkton','Salem
% ','Blissfield','Bedford','Greenville','North Star','Union
% City','Sherwood','Ashley','Birmingham','Milan','Sandusky','Colum
% bus','Lyons','Metamora','Burton','Alpha','Cedarville','Jamestown
% ','Fairview','Harrison','Arcadia','Kenton','Ridgeway','Ada','Alg
% er','Freeport','Harrisville','Napoleon','Highland','Lakeville','
% Millersburg','Nashville','Bellevue','New
% Haven','Jackson','Wellston','Bloomingdale','Empire','Mount
% Pleasant','Richmond','Perry','Eastlake','Homer','Utica','Lakevie
% w','Quincy','Holland','Ellsworth','Petersburg','Marion','Caledon
% ia','Brunswick','Chippewa
% Lake','Litchfield','Portland','Coldwater','Mendon','Rockford','C
% ovington','Troy','Clayton','Vandalia','Fulton','Sparta','Rosevil
% le','Martin','Somerset','Jasper','Wakefield','Ravenna','Wayland'
% ,'Deerfield','Camden','Cloverdale','Plymouth','Shelby','Frankfor
% t','Kingston','Fremont','Adrian','Attica','Flat
% Rock','Fostoria','Republic','Sidney','Paris','Canton','Bath','Cl
% inton','Hudson','Akron','Fowler','Hartford','Niles','Warren','Du
% ndee','Marysville','Ray','Franklin','Mason','Lowell','Newport','
% ------------------------------------------------
% #10 ( -- /Graduate) (0/10 pts)
* ** Only for Graduate Studetns **
% Download the 'parse.pl' from canvas and study it.
% Write Prolog rules to parse simple English sentences
% (similar to how it was done in parse.pl). The difference here is that
% the number (i.e., plurality) of the noun phrase and verb phrase must match.
% That is, “The sun shines” and “The suns shine” is proper,
% whereas “The suns shines” and “The sun shine” are not.
% Make sure your code also includes the following vocabulary.
% singular nouns: sun, bus, deer, grass, party
% plural nouns: suns, buses, deer, grasses, parties
% articles: a, an, the
% adverbs: loudly, brightly
% adjectives: yellow, big, brown, green, party
% plural verbs: shine, continue, party, eat
% singular verbs: shines, continues, parties, eats


% sentence([the, party, bus, shines, brightly]). -> true.
% sentence([the, big, party, continues]). -> true.
% sentence([a, big, brown, deer, eats, loudly]). -> true.
% sentence([big, brown, deer, eat, loudly]). -> true.
% sentence([the, sun, shines, brightly]). -> true.
% sentence([the, suns, shine, brightly]). -> true.
% sentence([the, deer, eats, loudly]). -> true.
% sentence([the, deer, eat, loudly]). -> true.
% sentence([the, sun, shine, brightly]). -> false.
%sentence([the, suns, shines, brightly]). -> false.
%--------------------------------------------
